openapi: 3.0.3
info:
  title: Sponsors API
  description: Sponsors part of Opora API
  version: "1.0.0"
servers:
  - url: 'http://localhost:8080'
    description: localhost
tags:
  - name: Sponsors
    description: API related to registered users who can create and modify initiatives

paths:
  /v1/sponsors:
    get:
      tags:
        - Sponsors
      summary: Get a list of all sponsors
      operationId: getSponsors
      responses:
        '200':
          description: A list of sponsors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SponsorServiceResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Sponsors
      summary: Register a new sponsor
      operationId: createSponsor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorServiceRequest'
      responses:
        '201':
          description: Sponsor successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/sponsors/{id}:
    get:
      tags:
        - Sponsors
      summary: Get a sponsor by ID
      operationId: getSponsor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sponsor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorServiceResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Sponsors
      summary: Update a sponsor by ID
      operationId: updateSponsor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorServiceRequest'
      responses:
        '200':
          description: Sponsor successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    delete:
      tags:
        - Sponsors
      summary: Delete a sponsor by ID
      operationId: deleteSponsor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Sponsor successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

components:
  schemas:

    SponsorServiceRequest:
      type: object
      required:
        - userName
        - name
        - description
        - contacts
      properties:
        userName:
          type: string
          description: Username used for registration with the platform
          example: 'prytula'
        name:
          type: string
          description: Display name
          example: 'Serhiy Prytula Charity Foundation'
        description:
          type: string
          example: 'Serhiy Prytula Charity Foundation is focused on strengthening the Defence Forces of Ukraine and providing assistance to the civilians affected by russian aggression.'
        media:
          type: string
          format: uuid
          example: 'ad7375ec-8c33-4d36-860e-bf16ac57d5ab'
        contacts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Contact'

    SponsorServiceResponse:
      type: object
      required:
        - id
        - userName
        - name
        - description
        - contacts
      properties:
        id:
          type: string
          format: uuid
          example: 'ae92aed5-c5ec-4b8d-99f2-5894d9629a26'
        userName:
          type: string
          description: Username used for registration with the platform
          example: 'prytula'
        name:
          type: string
          description: Display name
          example: 'Serhiy Prytula Charity Foundation'
        description:
          type: string
          example: 'Serhiy Prytula Charity Foundation is focused on strengthening the Defence Forces of Ukraine and providing assistance to the civilians affected by russian aggression.'
        media:
          type: string
          format: uuid
          example: 'ad7375ec-8c33-4d36-860e-bf16ac57d5ab'
        contacts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Contact'

    Contact:
      type: object
      required:
        - firstName
        - lastName
        - phones
      properties:
        firstName:
          type: string
          example: 'Serhiy'
        lastName:
          type: string
          example: 'Prytula'
        phones:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Phone'
        email:
          type: string
          format: email
          example: 'serhiy.prutyla@gmail.com'
        links:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Link'

    Link:
      type: object
      required:
        - url
        - platform
      properties:
        url:
          type: string
          example: 'https://www.facebook.com/prytulafoundation.org'
        platform:
          type: string
          enum:
            - facebook
            - x
            - instagram
            - telegram
            - website
          example: 'facebook'

    Phone:
      type: object
      required:
        - number
        - types
      properties:
        number:
          type: string
          example: '0800 300 114'
        types:
          type: array
          minItems: 1
          items:
            type: string
            enum:
              - cellular
              - viber
              - telegram
              - whatsapp
              - signal
          example: 'cellular'

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2023-11-21T14:48:41.877976Z'
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: 'JSON parse error: Cannot deserialize value of type `java.util.UUID` from String \"<uuid>\": UUID has to be represented by standard 36-char representation'
        details:
          type: string
          description: Additional details about the error, if available.
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: The field associated with this error.
                example: 'uuid'
              message:
                type: string
                description: A human-readable message providing more details about the field error.
                example: 'JSON parse error: Cannot deserialize value of type `java.util.UUID` from String \"<uuid>\": UUID has to be represented by standard 36-char representation'
          description: An array of errors relating to specific fields in the request.

  securitySchemes:

    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost:9000/realms/opora/protocol/openid-connect/token
          scopes: { }

  responses:

    BadRequest:
      description: The request could not be understood or was missing required parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication credentials were missing or incorrect.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: The request was valid but the server is refusing action. The user might not have the necessary permissions for a resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: The server encountered an internal error or misconfiguration and was unable to complete your request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'