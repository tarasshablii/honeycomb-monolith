openapi: 3.0.3
info:
  title: Opora API
  description: API for connecting donors with humanitarian initiatives
  version: "1.0.0"
servers:
  - url: 'http://localhost:8080'
    description: localhost
tags:
  - name: Sponsors
    description: API related to registered users who can create and modify initiatives
  - name: Initiatives
    description: API related to humanitarian initiatives organized by sponsors
  - name: Media
    description: API for accessing media files

paths:
  /v1/sponsors:
    get:
      tags:
        - Sponsors
      summary: Get a list of all sponsors
      operationId: getSponsors
      responses:
        '200':
          description: A list of sponsors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SponsorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Sponsors
      summary: Register a new sponsor
      operationId: createSponsor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorRequest'
      responses:
        '201':
          description: Sponsor successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/sponsors/{id}:
    get:
      tags:
        - Sponsors
      summary: Get a sponsor by ID
      operationId: getSponsor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sponsor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Sponsors
      summary: Update a sponsor by ID
      operationId: updateSponsor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorRequest'
      responses:
        '200':
          description: Sponsor successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    delete:
      tags:
        - Sponsors
      summary: Delete a sponsor by ID
      operationId: deleteSponsor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Sponsor successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/initiatives:
    get:
      tags:
        - Initiatives
      summary: Get a list of all initiatives
      operationId: getInitiatives
      parameters:
        - name: sponsor
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Optional sponsor ID to filter the initiatives
      responses:
        '200':
          description: A list of initiatives
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitiativeResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Initiatives
      summary: Register a new initiative
      operationId: createInitiative
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeRequest'
      responses:
        '201':
          description: Initiative successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/initiatives/{id}:
    get:
      tags:
        - Initiatives
      summary: Get an initiative by ID
      operationId: getInitiative
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Initiative details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Initiatives
      summary: Update an initiative by ID
      operationId: updateInitiative
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeRequest'
      responses:
        '200':
          description: Initiative successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    delete:
      tags:
        - Initiatives
      summary: Delete an initiative by ID
      operationId: deleteInitiative
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Initiative successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/media:
    post:
      tags:
        - Media
      summary: Upload a new image
      operationId: createMedia
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Image successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

  /v1/media/{id}:
    get:
      tags:
        - Media
      summary: Get an image by ID
      operationId: getMedia
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Image details
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Media
      summary: Update an image by ID
      operationId: updateMedia
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Image successfully updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]
    delete:
      tags:
        - Media
      summary: Delete an image by ID
      operationId: deleteMedia
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Image successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: [ ]

components:
  schemas:

    SponsorRequest:
      type: object
      required:
        - userName
        - name
        - description
        - contacts
      properties:
        userName:
          type: string
          description: Username used for registration with the platform
          example: 'prytula'
        name:
          type: string
          description: Display name
          example: 'Serhiy Prytula Charity Foundation'
        description:
          type: string
          example: 'Serhiy Prytula Charity Foundation is focused on strengthening the Defence Forces of Ukraine and providing assistance to the civilians affected by russian aggression.'
        media:
          type: string
          format: uuid
          example: 'ad7375ec-8c33-4d36-860e-bf16ac57d5ab'
        contacts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Contact'

    SponsorResponse:
      type: object
      required:
        - id
        - userName
        - name
        - description
        - contacts
      properties:
        id:
          type: string
          format: uuid
          example: 'ae92aed5-c5ec-4b8d-99f2-5894d9629a26'
        userName:
          type: string
          description: Username used for registration with the platform
          example: 'prytula'
        name:
          type: string
          description: Display name
          example: 'Serhiy Prytula Charity Foundation'
        description:
          type: string
          example: 'Serhiy Prytula Charity Foundation is focused on strengthening the Defence Forces of Ukraine and providing assistance to the civilians affected by russian aggression.'
        media:
          type: string
          format: uuid
          example: 'ad7375ec-8c33-4d36-860e-bf16ac57d5ab'
        contacts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Contact'

    InitiativeRequest:
      type: object
      required:
        - title
        - description
        - status
        - sponsor
        - contacts
        - directions
        - items
      properties:
        title:
          type: string
          example: 'Kherson aid'
        description:
          type: string
          example: 'Urgent drive to provide necessities to Kherson region after Kakhovka dam collapse'
        media:
          type: string
          format: uuid
          example: '913829c5-6de1-4e44-9ffe-3e7ae84b0d19'
        status:
          type: string
          enum:
            - ACTIVE
            - COMPLETED
            - CANCELED
          example: 'ACTIVE'
        isUrgent:
          type: boolean
          default: false
          example: true
        sponsor:
          type: object
          description: Main info of the sponsor who organized this initiative
          required:
            - id
            - userName
            - name
          properties:
            id:
              type: string
              format: uuid
              example: 'ae92aed5-c5ec-4b8d-99f2-5894d9629a26'
            userName:
              type: string
              description: Username used for registration with the platform
              example: 'prytula'
            name:
              type: string
              description: Display name
              example: 'Serhiy Prytula Charity Foundation'
        contacts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Contact'
        directions:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/Address'
              - $ref: '#/components/schemas/NovaPoshta'
            discriminator:
              propertyName: directionsType
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Item'

    InitiativeResponse:
      type: object
      required:
        - id
        - title
        - description
        - status
        - sponsor
        - contacts
        - directions
        - items
      properties:
        id:
          type: string
          format: uuid
          example: 'e22d5ccc-e85e-4cb1-8d8a-9eda1cd412a5'
        title:
          type: string
          example: 'Kherson aid'
        description:
          type: string
          example: 'Urgent drive to provide necessities to Kherson region after Kakhovka dam collapse'
        media:
          type: string
          format: uuid
          example: '913829c5-6de1-4e44-9ffe-3e7ae84b0d19'
        status:
          type: string
          enum:
            - ACTIVE
            - COMPLETED
            - CANCELED
          example: 'ACTIVE'
        isUrgent:
          type: boolean
          default: false
          example: true
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 78
        sponsor:
          type: object
          description: Main info of the sponsor who organized this initiative
          required:
            - id
            - userName
            - name
          properties:
            id:
              type: string
              format: uuid
              example: 'ae92aed5-c5ec-4b8d-99f2-5894d9629a26'
            userName:
              type: string
              description: Username used for registration with the platform
              example: 'prytula'
            name:
              type: string
              description: Display name
              example: 'Serhiy Prytula Charity Foundation'
        contacts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Contact'
        directions:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/Address'
              - $ref: '#/components/schemas/NovaPoshta'
            discriminator:
              propertyName: directionsType
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Item'

    Contact:
      type: object
      required:
        - firstName
        - lastName
        - phones
      properties:
        firstName:
          type: string
          example: 'Serhiy'
        lastName:
          type: string
          example: 'Prytula'
        phones:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Phone'
        email:
          type: string
          format: email
          example: 'serhiy.prutyla@gmail.com'
        links:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Link'

    Link:
      type: object
      required:
        - url
        - platform
      properties:
        url:
          type: string
          example: 'https://www.facebook.com/prytulafoundation.org'
        platform:
          type: string
          enum:
            - facebook
            - x
            - instagram
            - telegram
            - website
          example: 'facebook'

    Address:
      type: object
      required:
        - directionsType
        - street
        - town
      properties:
        directionsType:
          type: string
          description: Directions type discriminator
          default: Address
        street:
          type: string
          example: 'vul. Hrushevskoho 1'
        town:
          type: string
          example: 'Kyiv'
        directions:
          type: string
          description: Any additional useful information for delivery
          example: 'Accepting deliveries at back door. Please, do not block the driveway.'

    NovaPoshta:
      type: object
      required:
        - directionsType
        - town
        - office
        - recipient
      properties:
        directionsType:
          type: string
          description: Directions type discriminator
          default: NovaPoshta
        town:
          type: string
          example: 'Kyiv'
        office:
          type: integer
          example: 345
        recipient:
          $ref: '#/components/schemas/Contact'
        directions:
          type: string
          description: Any additional useful information for delivery
          example: 'Please, cover shipping expenses.'

    Item:
      type: object
      required:
        - title
        - target
      properties:
        title:
          type: string
          example: 'blankets'
        description:
          type: string
          example: 'Blankets of any size and type, the warmer the better'
        media:
          type: string
          format: uuid
          example: 'd4d5b327-07b2-4f04-9275-e4fa00af87fe'
        unit:
          type: string
          default: count
          enum:
            - count
            - kg
            - l
            - pack
        target:
          type: integer
          description: Final goal in amount of units
          example: 50
        current:
          type: integer
          default: 0
          description: Current number of units collected
          example: 39

    Phone:
      type: object
      required:
        - number
        - types
      properties:
        number:
          type: string
          example: '0800 300 114'
        types:
          type: array
          minItems: 1
          items:
            type: string
            enum:
              - cellular
              - viber
              - telegram
              - whatsapp
              - signal
          example: 'cellular'

    MediaResponse:
      type: object
      required:
        - id
        - url
      properties:
        id:
          type: string
          format: uuid
          example: '8751674d-ea92-4a01-95d1-d50e603c6920'
        url:
          type: string
          format: uri
          example: 'http://localhost:8080/v1/media/8751674d-ea92-4a01-95d1-d50e603c6920'

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2023-11-21T14:48:41.877976Z'
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: 'JSON parse error: Cannot deserialize value of type `java.util.UUID` from String \"<uuid>\": UUID has to be represented by standard 36-char representation'
        details:
          type: string
          description: Additional details about the error, if available.
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: The field associated with this error.
                example: 'uuid'
              message:
                type: string
                description: A human-readable message providing more details about the field error.
                example: 'JSON parse error: Cannot deserialize value of type `java.util.UUID` from String \"<uuid>\": UUID has to be represented by standard 36-char representation'
          description: An array of errors relating to specific fields in the request.

  securitySchemes:

    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost:9000/realms/opora/protocol/openid-connect/token
          scopes: { }

  responses:

    BadRequest:
      description: The request could not be understood or was missing required parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication credentials were missing or incorrect.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: The request was valid but the server is refusing action. The user might not have the necessary permissions for a resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: The server encountered an internal error or misconfiguration and was unable to complete your request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'